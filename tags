!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCELERATOR	drivingmodel.h	14;"	d
DEACTIVE_OPACITY	drivingwindow.cpp	8;"	d	file:
DECELERATOR	drivingmodel.h	15;"	d
DRIVINGMODEL_H	drivingmodel.h	2;"	d
DRIVINGWINDOW_H	drivingwindow.h	2;"	d
Directions	drivingmodel.h	/^    enum Directions {Left = 0, Up, Right, Down, Stop};$/;"	g	class:DrivingModel
Down	drivingmodel.h	/^    enum Directions {Left = 0, Up, Right, Down, Stop};$/;"	e	enum:DrivingModel::Directions
DrivingModel	drivingmodel.cpp	/^DrivingModel::DrivingModel(QObject *parent, QThread *thread) :$/;"	f	class:DrivingModel
DrivingModel	drivingmodel.h	/^class DrivingModel : public QObject$/;"	c
DrivingWindow	drivingwindow.cpp	/^DrivingWindow::DrivingWindow(DrivingModel &drivingModel, QWidget *parent) :$/;"	f	class:DrivingWindow
DrivingWindow	drivingwindow.h	/^class DrivingWindow : public QWidget$/;"	c
GEAR	drivingmodel.h	13;"	d
HANDLE_SCALE_MIN	drivingmodel.cpp	8;"	d	file:
Left	drivingmodel.h	/^    enum Directions {Left = 0, Up, Right, Down, Stop};$/;"	e	enum:DrivingModel::Directions
MAINWINDOW_H	mainwindow.h	2;"	d
MILISEC_PER_SEC	drivingmodel.cpp	4;"	d	file:
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(DrivingModel &drivingModel, QWidget *parent) :$/;"	f	class:MainWindow
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
NPARAM	drivingmodel.h	12;"	d
Right	drivingmodel.h	/^    enum Directions {Left = 0, Up, Right, Down, Stop};$/;"	e	enum:DrivingModel::Directions
SETUPWINDOW_H	setupwindow.h	2;"	d
SPEED_LIGHT_THRESHOLD	drivingmodel.cpp	9;"	d	file:
SPEED_LOW_RATE	drivingmodel.cpp	6;"	d	file:
SPEED_THRESHOLD	drivingmodel.cpp	5;"	d	file:
SetupWindow	setupwindow.cpp	/^SetupWindow::SetupWindow(DrivingModel & drivingModel, QWidget *parent) :$/;"	f	class:SetupWindow
SetupWindow	setupwindow.h	/^class SetupWindow : public QWidget$/;"	c
Stop	drivingmodel.h	/^    enum Directions {Left = 0, Up, Right, Down, Stop};$/;"	e	enum:DrivingModel::Directions
UI_REFRESH_RATE	drivingmodel.cpp	7;"	d	file:
UPDATE_RATE	drivingmodel.cpp	3;"	d	file:
UPDOWN_THRESHOLD	drivingmodel.cpp	/^const double DrivingModel::UPDOWN_THRESHOLD = 0.4;$/;"	m	class:DrivingModel	file:
UPDOWN_THRESHOLD	drivingmodel.h	/^    static const double UPDOWN_THRESHOLD;$/;"	m	class:DrivingModel
Ui	drivingwindow.h	/^namespace Ui {$/;"	n
Ui	setupwindow.h	/^namespace Ui {$/;"	n
Up	drivingmodel.h	/^    enum Directions {Left = 0, Up, Right, Down, Stop};$/;"	e	enum:DrivingModel::Directions
WHEEL	drivingmodel.h	16;"	d
WHEEL_LIGHT_THRESHOLD	drivingmodel.cpp	10;"	d	file:
close	drivingmodel.cpp	/^void DrivingModel::close(){$/;"	f	class:DrivingModel
connectServer	drivingmodel.cpp	/^void DrivingModel::connectServer(QString const& host, quint16 port){$/;"	f	class:DrivingModel
currentParam	drivingmodel.h	/^    int currentParam;$/;"	m	class:DrivingModel
driverInit	drivingmodel.cpp	/^void DrivingModel::driverInit(QPoint const& newMouse, QSize const& winSize, QPoint const& stopPos, QSize const& stopSize){$/;"	f	class:DrivingModel
drivingModel	drivingwindow.h	/^    DrivingModel &drivingModel;$/;"	m	class:DrivingWindow
drivingModel	mainwindow.h	/^    DrivingModel &drivingModel;$/;"	m	class:MainWindow
drivingModel	setupwindow.h	/^    DrivingModel & drivingModel;$/;"	m	class:SetupWindow
drivingWindow	mainwindow.h	/^    DrivingWindow *drivingWindow;$/;"	m	class:MainWindow
evalSpeed	drivingmodel.cpp	/^int DrivingModel::evalSpeed(int offset, int maxVal){$/;"	f	class:DrivingModel
evalWheel	drivingmodel.cpp	/^int DrivingModel::evalWheel(int offset, int maxVal){$/;"	f	class:DrivingModel
firstMove	drivingmodel.h	/^    bool firstMove;$/;"	m	class:DrivingModel
handleImg	drivingwindow.h	/^    QImage handleImg;$/;"	m	class:DrivingWindow
handleSize	drivingwindow.h	/^    QSize handleSize;$/;"	m	class:DrivingWindow
labels	drivingwindow.h	/^    QList<QLabel*> labels;$/;"	m	class:DrivingWindow
lock	drivingmodel.h	/^    QMutex lock;$/;"	m	class:DrivingModel
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
mouse	drivingmodel.h	/^    QPoint mouse;$/;"	m	class:DrivingModel
mouseMoveEvent	drivingwindow.cpp	/^void DrivingWindow::mouseMoveEvent(QMouseEvent *event){$/;"	f	class:DrivingWindow
on_okButton_clicked	setupwindow.cpp	/^void SetupWindow::on_okButton_clicked()$/;"	f	class:SetupWindow
on_startButton_clicked	drivingwindow.cpp	/^void DrivingWindow::on_startButton_clicked()$/;"	f	class:DrivingWindow
opacityEffects	drivingwindow.h	/^    QGraphicsOpacityEffect opacityEffects[5];$/;"	m	class:DrivingWindow
painter	drivingwindow.h	/^    QPainter painter;$/;"	m	class:DrivingWindow
params	drivingmodel.h	/^    int params[NPARAM][2];$/;"	m	class:DrivingModel
pendingStart	drivingmodel.h	/^    bool pendingStart;$/;"	m	class:DrivingModel
rotateAngle	drivingmodel.cpp	/^qreal DrivingModel::rotateAngle(QPoint const& pos){$/;"	f	class:DrivingModel
setupWindow	mainwindow.h	/^    SetupWindow *setupWindow;$/;"	m	class:MainWindow
shouldLightOn	drivingmodel.cpp	/^QList<bool> DrivingModel::shouldLightOn(QPoint const pos){$/;"	f	class:DrivingModel
shouldStop	drivingmodel.cpp	/^bool DrivingModel::shouldStop(QPoint const pos){$/;"	f	class:DrivingModel
socket	drivingmodel.h	/^    QTcpSocket socket;$/;"	m	class:DrivingModel
speedScale	drivingmodel.cpp	/^qreal DrivingModel::speedScale(QPoint const& pos){$/;"	f	class:DrivingModel
start	drivingmodel.cpp	/^void DrivingModel::start(){$/;"	f	class:DrivingModel
stopPos	drivingmodel.h	/^    QPoint stopPos;$/;"	m	class:DrivingModel
stopSize	drivingmodel.h	/^    QSize winSize, stopSize;$/;"	m	class:DrivingModel
timer	drivingmodel.h	/^    QTimer *timer;$/;"	m	class:DrivingModel
ui	drivingwindow.h	/^    Ui::DrivingWindow *ui;$/;"	m	class:DrivingWindow
ui	setupwindow.h	/^    Ui::SetupWindow *ui;$/;"	m	class:SetupWindow
uiLock	drivingmodel.h	/^    QMutex uiLock;$/;"	m	class:DrivingModel
updateParam	drivingmodel.cpp	/^void DrivingModel::updateParam(){$/;"	f	class:DrivingModel
updatePos	drivingmodel.cpp	/^void DrivingModel::updatePos(QPoint const pos){$/;"	f	class:DrivingModel
winSize	drivingmodel.h	/^    QSize winSize, stopSize;$/;"	m	class:DrivingModel
~DrivingWindow	drivingwindow.cpp	/^DrivingWindow::~DrivingWindow(){$/;"	f	class:DrivingWindow
~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~SetupWindow	setupwindow.cpp	/^SetupWindow::~SetupWindow(){$/;"	f	class:SetupWindow
